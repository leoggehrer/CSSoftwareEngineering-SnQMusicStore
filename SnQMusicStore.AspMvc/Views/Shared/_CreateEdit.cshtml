@*@CodeCopy*@
@{
    @using CommonBase.Extensions
    @using SnQMusicStore.AspMvc.Models.Modules.Common
    @using SnQMusicStore.AspMvc.Modules.Handler
    @using SnQMusicStore.AspMvc.Modules.Language
    @using SnQMusicStore.AspMvc.Modules.Session
    @using SnQMusicStore.AspMvc.Modules.View
    @using SnQMusicStore.AspMvc.Models.Modules.View
    @model EditViewModel

    if (Model != null)
    {
        var viewBagInfo = Model.ViewBagInfo ?? new ViewBagWrapper(ViewBag);
        var sessionInfo = new SessionWrapper(Context.Session);

        @if (Model.DisplayType.IsGenericTypeOf(typeof(OneToAnotherModel<,,,>)))
        {
            var oneProperty = Model.DisplayType.GetProperty("OneModel");
            var oneModel = oneProperty?.GetValue(Model.DisplayModel) as IdentityModel;
            var anotherProperty = Model.DisplayType.GetProperty("AnotherModel");
            var anotherModel = anotherProperty?.GetValue(Model.DisplayModel) as IdentityModel;

            if (oneModel != null)
            {
                viewBagInfo.ItemPrefix = "OneModel";
                oneModel.ViewBagInfo = viewBagInfo;
                @await Html.PartialAsync("_EditModel", oneModel)
            }
            if (anotherModel != null)
            {
                viewBagInfo.ItemPrefix = "AnotherModel";
                anotherModel.ViewBagInfo = viewBagInfo;
                @await Html.PartialAsync("_EditModel", anotherModel)
            }
            <hr />
        }
        else if (Model.DisplayType.IsGenericTypeOf(typeof(OneToManyModel<,,,>)))
        {
            var oneProperty = Model.DisplayType.GetProperty("OneModel");
            var oneModel = oneProperty?.GetValue(Model.DisplayModel) as IdentityModel;
            var manyProperty = Model.DisplayType.GetProperty("ManyModels");
            var manyModels = manyProperty?.GetValue(Model.DisplayModel) as IdentityModel;

            viewBagInfo.ParentModel = oneModel;
            viewBagInfo.ItemPrefix = "OneModel";
            if (oneModel != null)
            {
                oneModel.ViewBagInfo = viewBagInfo;
                @await Html.PartialAsync("_EditModel", oneModel)
            }
            <hr />
        }
        else if (Model.DisplayType.IsGenericTypeOf(typeof(CompositeModel<,,,,,>)))
        {
            var connectorProperty = Model.DisplayType.GetProperty("ConnectorModel");
            var connectorModel = connectorProperty?.GetValue(Model.DisplayModel) as IdentityModel;
            var oneProperty = Model.DisplayType.GetProperty("OneModel");
            var oneModel = oneProperty?.GetValue(Model.DisplayModel) as IdentityModel;
            var anotherProperty = Model.DisplayType.GetProperty("AnotherModel");
            var anotherModel = anotherProperty?.GetValue(Model.DisplayModel) as IdentityModel;

            if (connectorModel != null)
            {
                viewBagInfo.ItemPrefix = "ConnectorModel";
                <h2>@viewBagInfo.TranslateFor("ConnectorModel")</h2>
                connectorModel.ViewBagInfo = viewBagInfo;
                @await Html.PartialAsync("_EditModel", connectorModel)
            }
            if (oneModel != null)
            {
                viewBagInfo.ItemPrefix = "OneModel";
                oneModel.ViewBagInfo = viewBagInfo;
                <h2>@viewBagInfo.TranslateFor("OneModel")</h2>
                @await Html.PartialAsync("_EditModel", oneModel)
            }
            if (anotherModel != null)
            {
                viewBagInfo.ItemPrefix = "AnotherModel";
                anotherModel.ViewBagInfo = viewBagInfo;
                <h2>@viewBagInfo.TranslateFor("AnotherModel")</h2>
                @await Html.PartialAsync("_EditModel", anotherModel)
            }
            <hr />
        }
        else 
        {
            Model.DisplayModel.ViewBagInfo = viewBagInfo;
            @await Html.PartialAsync("_EditModel", Model.DisplayModel)
            <hr />
        }
    }
}
